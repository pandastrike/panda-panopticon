// Generated by CoffeeScript 1.6.3
(function() {
  var Adapter, BaseAdapter, BaseCollection, Collection, defaults, merge, overload, redis, type, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = require("fairmont"), type = _ref.type, merge = _ref.merge;

  overload = require("typely").overload;

  redis = require("redis");

  _ref1 = require("./base-adapter"), BaseAdapter = _ref1.BaseAdapter, BaseCollection = _ref1.BaseCollection;

  defaults = {
    port: 6379,
    host: "127.0.0.1"
  };

  Adapter = (function(_super) {
    __extends(Adapter, _super);

    Adapter.make = function(configuration) {
      return new this(configuration);
    };

    function Adapter(configuration) {
      var _this = this;
      this.configuration = configuration;
      this.configuration = merge(defaults, this.configuration);
      Adapter.__super__.constructor.call(this, this.configuration);
      this.events.safely(function() {
        _this.client = redis.createClient(_this.configuration.port, _this.configuration.host);
        _this.client.on("ready", function() {
          _this.log("RedisAdapter: Connected to Redis server @ " + _this.configuration.host + ":" + _this.configuration.port);
          return _this.events.emit("ready", _this);
        });
        return _this.client.on("error", function(err) {
          _this.log("RedisAdapter: Error connecting to Redis server @ " + _this.configuration.host + ":" + _this.configuration.port + " - " + err);
          return _this.events.emit("error", err);
        });
      });
    }

    Adapter.prototype.collection = function(name) {
      var _this = this;
      return this.events.source(function(events) {
        return events.emit("success", Collection.make({
          name: name,
          events: _this.events,
          adapter: _this,
          log: _this.log
        }));
      });
    };

    Adapter.prototype.close = function() {
      return this.client.end();
    };

    return Adapter;

  })(BaseAdapter);

  Collection = (function(_super) {
    __extends(Collection, _super);

    Collection.make = function(options) {
      return new this(options);
    };

    function Collection(_arg) {
      this.name = _arg.name, this.events = _arg.events, this.adapter = _arg.adapter, this.log = _arg.log;
    }

    Collection.prototype.find = overload(function(match, fail) {
      match("array", function(keys) {
        var _this = this;
        return this.events.source(function(events) {
          return _this.adapter.client.hmget(_this.name, keys, function(err, res) {
            var data;
            if (err == null) {
              data = res.map(function(item, index) {
                var obj;
                obj = null;
                if (item != null) {
                  obj = JSON.parse(item);
                  obj._id = keys[index];
                }
                return obj;
              });
              return events.emit("success", data);
            } else {
              return events.emit("error", err);
            }
          });
        });
      });
      return match("string", function(key) {
        return this.get(key);
      });
    });

    Collection.prototype.get = function(key) {
      var _this = this;
      return this.events.source(function(events) {
        return _this.adapter.client.hget(_this.name, key, function(err, res) {
          var data;
          if (err == null) {
            data = res != null ? JSON.parse(res) : null;
            return events.emit("success", data);
          } else {
            return events.emit("error", err);
          }
        });
      });
    };

    Collection.prototype.put = function(key, object) {
      var _this = this;
      return this.events.source(function(events) {
        return _this.adapter.client.hset(_this.name, key, JSON.stringify(object), function(err, res) {
          if (err == null) {
            return events.emit("success", object);
          } else {
            return events.emit("error", err);
          }
        });
      });
    };

    Collection.prototype["delete"] = function(key) {
      var _this = this;
      return this.events.source(function(events) {
        return _this.adapter.client.hdel(_this.name, key, function(err, res) {
          if (err == null) {
            return events.emit("success");
          } else {
            return events.emit("error", err);
          }
        });
      });
    };

    Collection.prototype.all = function() {
      var _this = this;
      return this.events.source(function(events) {
        return _this.adapter.client.hgetall(_this.name, function(err, res) {
          var data, key, obj, value;
          if (err == null) {
            data = [];
            for (key in res) {
              value = res[key];
              obj = JSON.parse(value);
              obj._id = key;
              data.push(obj);
            }
            return events.emit("success", data);
          } else {
            return events.emit("error", err);
          }
        });
      });
    };

    Collection.prototype.count = function() {
      var _this = this;
      return this.events.source(function(events) {
        return _this.adapter.client.hlen(_this.name, function(err, res) {
          if (err == null) {
            return events.emit("success", res);
          } else {
            return events.emit("error", err);
          }
        });
      });
    };

    return Collection;

  })(BaseCollection);

  module.exports = {
    Adapter: Adapter,
    Collection: Collection
  };

}).call(this);
