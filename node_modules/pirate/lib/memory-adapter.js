// Generated by CoffeeScript 1.6.3
(function() {
  var Adapter, BaseAdapter, BaseCollection, Collection, overload, type, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  type = require("fairmont").type;

  overload = require("typely").overload;

  _ref = require("./base-adapter"), BaseAdapter = _ref.BaseAdapter, BaseCollection = _ref.BaseCollection;

  Adapter = (function(_super) {
    __extends(Adapter, _super);

    Adapter.make = function(configuration) {
      return new this(configuration);
    };

    function Adapter(configuration) {
      this.configuration = configuration;
      Adapter.__super__.constructor.call(this, this.configuration);
      this.database = {};
      this.events.emit("ready", this);
    }

    Adapter.prototype.collection = function(name) {
      var _this = this;
      return this.events.source(function(events) {
        _this.database[name] = Collection.make({
          collection: {},
          events: _this.events,
          adapter: _this,
          log: _this.log
        });
        return events.emit("success", _this.database[name]);
      });
    };

    Adapter.prototype.close = function() {};

    return Adapter;

  })(BaseAdapter);

  Collection = (function(_super) {
    __extends(Collection, _super);

    Collection.make = function(options) {
      return new this(options);
    };

    function Collection(_arg) {
      var events;
      events = _arg.events, this.collection = _arg.collection, this.adapter = _arg.adapter, this.log = _arg.log;
      this.events = events.source();
    }

    Collection.prototype.find = overload(function(match, fail) {
      match("array", function(keys) {
        var _this = this;
        return this.events.source(function(events) {
          var values;
          values = keys.map(function(key) {
            return _this.collection[key];
          });
          return events.emit("success", values);
        });
      });
      return match("string", function(key) {
        return this.get(key);
      });
    });

    Collection.prototype.get = function(key) {
      var _this = this;
      return this.events.source(function(events) {
        return events.emit("success", _this.collection[key]);
      });
    };

    Collection.prototype.put = function(key, object) {
      var _this = this;
      return this.events.source(function(events) {
        _this.collection[key] = object;
        return events.emit("success", object);
      });
    };

    Collection.prototype["delete"] = function(key) {
      var _this = this;
      return this.events.source(function(events) {
        var object;
        object = _this.collection[key];
        delete _this.collection[key];
        return events.emit("success");
      });
    };

    Collection.prototype.all = function() {
      var _this = this;
      return this.events.source(function(events) {
        var key, values;
        values = (function() {
          var _i, _len, _ref1, _results;
          _ref1 = Object.keys(this.collection);
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            key = _ref1[_i];
            _results.push(this.collection[key]);
          }
          return _results;
        }).call(_this);
        return events.emit("success", values);
      });
    };

    Collection.prototype.count = function() {
      var _this = this;
      return this.events.source(function(events) {
        return events.emit("success", Object.keys(_this.collection).length);
      });
    };

    return Collection;

  })(BaseCollection);

  module.exports = {
    Adapter: Adapter,
    Collection: Collection
  };

}).call(this);
