// Generated by CoffeeScript 1.6.3
(function() {
  var Adapter, BaseAdapter, BaseCollection, Collection, ElasticSearchClient, defaults, merge, overload, type, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = require("fairmont"), type = _ref.type, merge = _ref.merge;

  overload = require("typely").overload;

  ElasticSearchClient = require("elasticsearchclient");

  _ref1 = require("./base-adapter"), BaseAdapter = _ref1.BaseAdapter, BaseCollection = _ref1.BaseCollection;

  defaults = {
    port: 9200,
    host: "127.0.0.1",
    secure: true
  };

  Adapter = (function(_super) {
    __extends(Adapter, _super);

    Adapter.prototype.esVersion = {
      major: 0,
      minor: 0,
      patch: 0
    };

    Adapter.make = function(configuration) {
      return new this(configuration);
    };

    function Adapter(configuration) {
      var _this = this;
      this.configuration = configuration;
      this.configuration = merge(defaults, this.configuration);
      Adapter.__super__.constructor.call(this, this.configuration);
      this.events.safely(function() {
        _this.client = new ElasticSearchClient(_this.configuration);
        return _this.client.createCall({
          path: "",
          method: "GET"
        }, _this.configuration).on("data", function(data) {
          var versionString, versionTokens;
          versionString = JSON.parse(data).version.number;
          versionTokens = versionString.split(".");
          _this.esVersion = {
            major: parseInt(versionTokens[0]),
            minor: parseInt(versionTokens[1]),
            patch: parseInt(versionTokens[2])
          };
          _this.log("ElasticsearchAdapter: Connected to Elasticsearch server @ " + _this.configuration.host + ":" + _this.configuration.port + " v" + versionString);
          return _this.events.emit("ready", _this);
        }).on("error", function(err) {
          _this.log("ElasticsearchAdapter: Error connecting to Elasticsearch server @ " + _this.configuration.host + ":" + _this.configuration.port + " - " + err);
          return _this.events.emit("error", err);
        }).exec();
      });
    }

    Adapter.prototype.collection = function(index, type) {
      var _this = this;
      return this.events.source(function(events) {
        var result;
        result = Collection.make({
          index: index,
          type: type,
          events: _this.events,
          adapter: _this,
          log: _this.log
        });
        return events.emit("success", result);
      });
    };

    Adapter.prototype.close = function() {};

    return Adapter;

  })(BaseAdapter);

  Collection = (function(_super) {
    __extends(Collection, _super);

    Collection.make = function(options) {
      return new this(options);
    };

    function Collection(_arg) {
      this.index = _arg.index, this.type = _arg.type, this.events = _arg.events, this.adapter = _arg.adapter, this.log = _arg.log;
    }

    Collection.prototype.find = overload(function(match, fail) {
      match("array", function(keys) {
        var _this = this;
        return this.events.source(function(events) {
          return events.safely(function() {
            var countQueryJSON;
            countQueryJSON = null;
            if (_this.adapter.esVersion.major >= 1 && _this.adapter.esVersion.minor >= 0 && _this.adapter.esVersion.patch >= 1) {
              countQueryJSON = {
                query: {
                  terms: {
                    _id: keys
                  }
                }
              };
            } else {
              countQueryJSON = {
                terms: {
                  _id: keys
                }
              };
            }
            return _this.adapter.client.count(_this.index, _this.type, countQueryJSON).on("data", function(data) {
              var findEvents, jsonData;
              jsonData = JSON.parse(data);
              if (jsonData.error == null) {
                findEvents = _this.find({
                  filter: {
                    terms: {
                      _id: keys
                    }
                  }
                }, {
                  size: jsonData.count
                });
                findEvents.on("success", function(data) {
                  return events.emit("success", data);
                });
                return findEvents.on("error", function(err) {
                  return events.emit("error", err);
                });
              } else {
                return events.emit("error", jsonData.error);
              }
            }).on("error", function(err) {
              return events.emit("error", err);
            }).exec();
          });
        });
      });
      match("string", function(queryString) {
        return this.find({
          query: {
            query_string: {
              query: queryString,
              default_operator: "AND"
            }
          }
        }, {});
      });
      match("object", function(query) {
        return this.find(query, {});
      });
      match("string", "object", function(queryString, options) {
        return this.find({
          query: {
            query_string: {
              query: queryString,
              default_operator: "AND"
            }
          }
        }, options);
      });
      return match("object", "object", function(query, options) {
        var _this = this;
        return this.events.source(function(events) {
          return events.safely(function() {
            return _this.adapter.client.search(_this.index, _this.type, query, options).on("data", function(data) {
              var jsonData, results;
              jsonData = JSON.parse(data);
              if (jsonData.error == null) {
                results = jsonData.hits.hits.map(function(dataElem) {
                  var result;
                  result = dataElem._source;
                  result._id = dataElem._id;
                  result.score = dataElem._score;
                  return result;
                });
                return events.emit("success", results);
              } else {
                return events.emit("error", jsonData.error);
              }
            }).on("error", function(err) {
              return events.emit("error", err);
            }).exec();
          });
        });
      });
    });

    Collection.prototype.get = overload(function(match, fail) {
      match("string", function(key) {
        return this.get({
          _id: key
        });
      });
      return match("object", function(query) {
        var _this = this;
        return this.events.source(function(events) {
          return events.safely(function() {
            return _this.adapter.client.search(_this.index, _this.type, {
              filter: {
                term: query
              }
            }).on("data", function(data) {
              var jsonData, result;
              jsonData = JSON.parse(data);
              if (jsonData.error == null) {
                if ((jsonData.hits != null) && (jsonData.hits.hits != null) && jsonData.hits.hits.length === 1) {
                  result = jsonData.hits.hits[0]._source;
                  result._id = jsonData.hits.hits[0]._id;
                  result.score = jsonData.hits.hits[0]._score;
                } else {
                  result = null;
                }
                return events.emit("success", result);
              } else {
                return events.emit("error", jsonData.error);
              }
            }).on("error", function(err) {
              return events.emit("error", err);
            }).exec();
          });
        });
      });
    });

    Collection.prototype.put = overload(function(match, fail) {
      match("object", function(object) {
        return this.put({
          _id: null
        }, object, {});
      });
      match("string", "object", function(key, object) {
        return this.put({
          _id: key
        }, object, {});
      });
      match("string", "object", "object", function(key, object, options) {
        return this.put({
          _id: key
        }, object, options);
      });
      match("object", "object", function(key, object) {
        return this.put(key, object, {});
      });
      return match("object", "object", "object", function(key, object, options) {
        var _this = this;
        return this.events.source(function(events) {
          return _this.adapter.client.index(_this.index, _this.type, object, key._id, options).on("data", function(data) {
            var jsonData;
            jsonData = JSON.parse(data);
            if (jsonData.error == null) {
              return events.emit("success", object);
            } else {
              return events.emit("error", jsonData.error);
            }
          }).on("error", function(err) {
            return events.emit("error", err);
          }).exec();
        });
      });
    });

    Collection.prototype.patch = overload(function(match, fail) {
      match("string", "object", function(key, object) {
        return this.patch({
          _id: key
        }, object, {});
      });
      match("string", "object", "object", function(key, object, options) {
        return this.patch({
          _id: key
        }, object, options);
      });
      match("object", "object", function(key, object) {
        return this.patch(key, object, {});
      });
      return match("object", "object", "object", function(key, object, options) {
        var _this = this;
        return this.events.source(function(events) {
          var _events;
          _events = _this.get(key._id);
          _events.on("success", function(data) {
            var __events;
            delete data._id;
            delete data.score;
            if (data != null) {
              data = merge(data, object);
            }
            __events = _this.put(key._id, data, options);
            __events.on("success", function(data) {
              return events.emit("success", data);
            });
            return __events.on("error", function(err) {
              return events.emit("error", err);
            });
          });
          return _events.on("error", function(err) {
            return events.emit("error", err);
          });
        });
      });
    });

    Collection.prototype["delete"] = overload(function(match, fail) {
      match("string", function(key) {
        return this["delete"]({
          _id: key
        });
      });
      return match("object", function(key) {
        var _this = this;
        return this.events.source(function(events) {
          return _this.adapter.client.deleteDocument(_this.index, _this.type, key._id).on("data", function(data) {
            var jsonData;
            jsonData = JSON.parse(data);
            if (jsonData.error == null) {
              return events.emit("success");
            } else {
              return events.emit("error", jsonData.error);
            }
          }).on("error", function(err) {
            return events.emit("error", err);
          }).exec();
        });
      });
    });

    Collection.prototype.all = function() {
      var _this = this;
      return this.events.source(function(events) {
        return events.safely(function() {
          var countEvents;
          countEvents = _this.count();
          countEvents.on("success", function(resultCount) {
            return _this.adapter.client.search(_this.index, _this.type, {
              query: {
                match_all: {}
              }
            }, {
              size: resultCount
            }).on("data", function(data) {
              var jsonData, results;
              jsonData = JSON.parse(data);
              if (jsonData.error == null) {
                results = jsonData.hits.hits.map(function(dataElem) {
                  var result;
                  result = dataElem._source;
                  result._id = dataElem._id;
                  result.score = dataElem._score;
                  return result;
                });
                return events.emit("success", results);
              } else {
                return events.emit("error", jsonData.error);
              }
            }).on("error", function(err) {
              return events.emit("error", err);
            }).exec();
          });
          return countEvents.on("error", function(err) {
            return events.emit("error", err);
          });
        });
      });
    };

    Collection.prototype.count = function() {
      var _this = this;
      return this.events.source(function(events) {
        var countQueryJSON;
        countQueryJSON = null;
        if (_this.adapter.esVersion.major >= 1 && _this.adapter.esVersion.minor >= 0 && _this.adapter.esVersion.patch >= 1) {
          countQueryJSON = {
            query: {
              match_all: {}
            }
          };
        } else {
          countQueryJSON = {
            match_all: {}
          };
        }
        return _this.adapter.client.count(_this.index, _this.type, countQueryJSON).on("data", function(data) {
          var jsonData;
          jsonData = JSON.parse(data);
          if (jsonData.error == null) {
            return events.emit("success", jsonData.count);
          } else {
            return events.emit("error", jsonData.error);
          }
        }).on("error", function(err) {
          return events.emit("error", err);
        }).exec();
      });
    };

    return Collection;

  })(BaseCollection);

  module.exports = {
    Adapter: Adapter,
    Collection: Collection
  };

}).call(this);
