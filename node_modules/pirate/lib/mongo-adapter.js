// Generated by CoffeeScript 1.6.3
(function() {
  var Adapter, BaseAdapter, BaseCollection, Collection, MongoDB, defaults, merge, overload, type, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = require("fairmont"), type = _ref.type, merge = _ref.merge;

  overload = require("typely").overload;

  MongoDB = require("mongodb");

  _ref1 = require("./base-adapter"), BaseAdapter = _ref1.BaseAdapter, BaseCollection = _ref1.BaseCollection;

  defaults = {
    port: 27017,
    host: "127.0.0.1",
    options: {
      auto_reconnect: true
    }
  };

  Adapter = (function(_super) {
    __extends(Adapter, _super);

    Adapter.make = function(configuration) {
      return new this(configuration);
    };

    function Adapter(configuration) {
      var database, host, options, port, _ref2,
        _this = this;
      this.configuration = configuration;
      this.configuration = merge(defaults, this.configuration);
      Adapter.__super__.constructor.call(this, this.configuration);
      _ref2 = this.configuration, host = _ref2.host, port = _ref2.port, options = _ref2.options, database = _ref2.database;
      this.events.safely(function() {
        var server;
        server = new MongoDB.Server(host, port, options);
        _this.database = new MongoDB.Db(database, server, {
          w: 1
        });
        return _this.database.open(function(error, database) {
          if (error == null) {
            _this.log("MongoAdapter: Connected to MongoDB server @ " + host + ":" + port);
            return _this.events.emit("ready", _this);
          } else {
            _this.log("MongoAdapter: Error connecting to MongoDB server @ " + host + ":" + port + " - " + error);
            return _this.events.emit("error", error);
          }
        });
      });
    }

    Adapter.prototype.collection = function(name) {
      var _this = this;
      return this.events.source(function(events) {
        return _this.database.collection(name, function(error, collection) {
          if (error == null) {
            return events.emit("success", Collection.make({
              collection: collection,
              events: _this.events,
              adapter: _this,
              log: _this.log
            }));
          } else {
            return events.emit("error", error);
          }
        });
      });
    };

    Adapter.prototype.close = function() {
      return this.database.close();
    };

    return Adapter;

  })(BaseAdapter);

  Collection = (function(_super) {
    __extends(Collection, _super);

    Collection.make = function(options) {
      return new this(options);
    };

    function Collection(_arg) {
      this.events = _arg.events, this.collection = _arg.collection, this.adapter = _arg.adapter, this.log = _arg.log;
    }

    Collection.prototype.find = overload(function(match, fail) {
      match("array", function(keys) {
        return this.find({
          _id: keys
        });
      });
      return match("object", function(query) {
        var key, values, _query,
          _this = this;
        _query = query;
        for (key in query) {
          values = query[key];
          _query[key] = {
            $in: values
          };
        }
        return this.events.source(function(events) {
          return events.safely(function() {
            return _this.collection.find(_query, function(error, cursor) {
              if (error) {
                return events.emit("error", error);
              } else {
                return cursor.toArray(events.callback);
              }
            });
          });
        });
      });
    });

    Collection.prototype.get = overload(function(match, fail) {
      match("string", function(key) {
        return this.get({
          _id: key
        });
      });
      return match("object", function(query) {
        var _this = this;
        return this.events.source(function(events) {
          return events.safely(function() {
            return _this.collection.findOne(query, events.callback);
          });
        });
      });
    });

    Collection.prototype.put = overload(function(match, fail) {
      match("string", "object", function(key, object) {
        return this.put({
          _id: key
        }, object);
      });
      return match("object", "object", function(key, object) {
        var _this = this;
        return this.events.source(function(events) {
          if (key._id != null) {
            object._id = key._id;
          } else {
            delete object._id;
          }
          return _this.collection.update(key, object, {
            upsert: true,
            safe: true
          }, events.callback);
        });
      });
    });

    Collection.prototype.patch = overload(function(match, fail) {
      match("string", "object", function(key, patch) {
        return this.patch({
          _id: key
        }, patch);
      });
      return match("object", "object", function(key, patch) {
        var _this = this;
        return this.events.source(function(events) {
          delete patch._id;
          return _this.collection.update(key, {
            $set: patch
          }, {
            safe: true
          }, events.callback);
        });
      });
    });

    Collection.prototype["delete"] = overload(function(match, fail) {
      match("string", function(key) {
        return this["delete"]({
          _id: key
        });
      });
      return match("object", function(key) {
        var _this = this;
        return this.events.source(function(events) {
          return _this.collection.remove(key, function(error, results) {
            if (error == null) {
              return events.emit("success");
            } else {
              return events.emit("error", error);
            }
          });
        });
      });
    });

    Collection.prototype.all = function() {
      var _this = this;
      return this.events.source(function(events) {
        return _this.collection.find({}, function(error, results) {
          if (error == null) {
            return results.toArray(function(error, results) {
              if (error == null) {
                return events.emit("success", results);
              } else {
                return events.emit("error", error);
              }
            });
          } else {
            return events.emit("error", error);
          }
        });
      });
    };

    Collection.prototype.count = function() {
      var _this = this;
      return this.events.source(function(events) {
        return _this.collection.count(function(error, count) {
          if (error == null) {
            return events.emit("success", count);
          } else {
            return events.emit("error", error);
          }
        });
      });
    };

    return Collection;

  })(BaseCollection);

  module.exports = {
    Adapter: Adapter,
    Collection: Collection
  };

}).call(this);
