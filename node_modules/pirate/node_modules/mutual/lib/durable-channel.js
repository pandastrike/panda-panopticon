// Generated by CoffeeScript 1.7.1
(function() {
  var DurableChannel, EventChannel, Redis, RemoteQueue, Transport, randomKey,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  randomKey = require("key-forge").randomKey;

  Redis = require("pirate").Redis;

  EventChannel = require("./event-channel");

  RemoteQueue = require("./remote-queue");

  Transport = require("./redis-transport");

  DurableChannel = (function(_super) {
    __extends(DurableChannel, _super);

    function DurableChannel(options) {
      DurableChannel.__super__.constructor.apply(this, arguments);
      this.name = options.name, this.timeoutMonitorFrequency = options.timeoutMonitorFrequency;
      if (this.name == null) {
        throw new Error("Durable channels cannot be anonymous");
      }
      this.timeoutMonitor = null;
      if (this.timeoutMonitorFrequency == null) {
        this.timeoutMonitorFrequency = 1000;
      }
      this.events = new EventChannel;
      this.adapter = new Redis.Adapter({
        events: new EventChannel,
        host: options.redis.host,
        port: options.redis.port
      });
      this.adapter.events.on("ready", (function(_this) {
        return function() {
          return _this.fire({
            event: "ready"
          });
        };
      })(this));
      this.transport = new Transport({
        host: options.redis.host,
        port: options.redis.port
      });
      this.transport.events.forward(this.events);
      this.store = null;
      this.queue = new RemoteQueue({
        name: "" + this.name + ".queue",
        transport: this.transport
      });
      this.destinationStores = {};
      this.destinationQueues = {};
      this.monitorTimeouts();
    }

    DurableChannel.prototype["package"] = function(_arg) {
      var content, message, requestId, timeout, to;
      content = _arg.content, to = _arg.to, requestId = _arg.requestId, timeout = _arg.timeout;
      return message = {
        id: randomKey(16),
        requestId: requestId,
        from: this.name,
        to: to,
        timeout: timeout,
        content: content
      };
    };

    DurableChannel.prototype.getStore = function() {
      if (this.store != null) {
        return this.store;
      }
      return this.events.serially((function(_this) {
        return function(go) {
          go(function() {
            return _this.adapter.collection("" + _this.name + ".messages");
          });
          return go(function(store) {
            _this.store = store;
            return _this.store;
          });
        };
      })(this))();
    };

    DurableChannel.prototype.getDestinationStore = function(name) {
      if (this.destinationStores[name] != null) {
        return this.destinationStores[name];
      }
      return this.events.serially((function(_this) {
        return function(go) {
          go(function() {
            return _this.adapter.collection("" + name + ".messages");
          });
          return go(function(store) {
            return _this.destinationStores[name] = store;
          });
        };
      })(this))();
    };

    DurableChannel.prototype.getDestinationQueue = function(name) {
      var _base;
      return (_base = this.destinationQueues)[name] != null ? _base[name] : _base[name] = new RemoteQueue({
        name: "" + name + ".queue",
        transport: this.transport
      });
    };

    DurableChannel.prototype.setMessageTimeout = function(name, channel, id, timeout) {
      if ((channel != null) && (id != null) && (timeout != null)) {
        return this.events.source((function(_this) {
          return function(events) {
            return _this.adapter.client.zadd(["" + name + ".pending", Date.now() + timeout, "" + channel + "::" + id], events.callback);
          };
        })(this));
      }
    };

    DurableChannel.prototype.clearMessageTimeout = function(name, channel, id) {
      if (id != null) {
        return this.events.source((function(_this) {
          return function(events) {
            return _this.adapter.client.zrem(["" + name + ".pending", "" + channel + "::" + id], events.callback);
          };
        })(this));
      }
    };

    DurableChannel.prototype.getMessageTimeout = function(name, channel, id) {
      if (id != null) {
        return this.events.source((function(_this) {
          return function(events) {
            return _this.adapter.client.zscore(["" + name + ".pending", "" + channel + "::" + id], events.callback);
          };
        })(this));
      }
    };

    DurableChannel.prototype.monitorTimeouts = function() {
      var loopToMonitor;
      loopToMonitor = (function(_this) {
        return function() {
          return _this.events.serially(function(go) {
            go(function() {
              return _this.events.source(function(events) {
                return _this.adapter.client.zrangebyscore(["" + _this.name + ".pending", 0, Date.now()], events.callback);
              });
            });
            go(function(expiredMessages) {
              if (expiredMessages.length === 0) {
                return;
              }
              return _this.events.source(function(events) {
                var expiredMessage, expiredMessageTokens, returned, _events, _i, _len, _results;
                returned = 0;
                _results = [];
                for (_i = 0, _len = expiredMessages.length; _i < _len; _i++) {
                  expiredMessage = expiredMessages[_i];
                  expiredMessageTokens = expiredMessage.split("::");
                  _events = _this.expireMessage(expiredMessageTokens[0], expiredMessageTokens[1]);
                  _events.on("success", function() {
                    returned++;
                    if (returned === expiredMessages.length) {
                      return events.emit("success");
                    }
                  });
                  _results.push(_events.on("error", function(err) {
                    return events.emit("error", err);
                  }));
                }
                return _results;
              });
            });
            return go(function() {
              return _this.timeoutMonitor = setTimeout(loopToMonitor, _this.timeoutMonitorFrequency);
            });
          })();
        };
      })(this);
      return this.timeoutMonitor = setTimeout(loopToMonitor, this.timeoutMonitorFrequency);
    };

    DurableChannel.prototype.expireMessage = function(channel, id) {
      var message, store;
      store = null;
      message = null;
      return this.events.serially((function(_this) {
        return function(go) {
          go(function() {
            return _this.getDestinationStore(channel);
          });
          go(function(_store) {
            store = _store;
            return store.get(id);
          });
          go(function(_message) {
            return message = _message;
          });
          go(function() {
            return _this.getMessageTimeout(_this.name, channel, id);
          });
          return go(function(timeout) {
            if (timeout == null) {
              return;
            }
            return _this.events.serially(function(go) {
              go(function() {
                if (message != null) {
                  return store["delete"](id);
                }
              });
              go(function() {
                return _this.clearMessageTimeout(_this.name, channel, id);
              });
              return go(function() {
                if (message != null) {
                  return _this.fire({
                    event: "timeout",
                    content: {
                      content: message.content,
                      requestId: message.requestId
                    }
                  });
                }
              });
            })();
          });
        };
      })(this))();
    };

    DurableChannel.prototype.send = function(_arg) {
      var content, message, timeout, to;
      content = _arg.content, to = _arg.to, timeout = _arg.timeout;
      message = this["package"]({
        content: content,
        to: to,
        timeout: timeout
      });
      return this.events.serially((function(_this) {
        return function(go) {
          go(function() {
            return _this.getDestinationStore(to);
          });
          go(function(destStore) {
            return destStore.put(message.id, message);
          });
          go(function() {
            return _this.setMessageTimeout(_this.name, to, message.id, message.timeout);
          });
          return go(function() {
            return _this.getDestinationQueue(to).emit("message", message.id);
          });
        };
      })(this))();
    };

    DurableChannel.prototype.reply = function(_arg) {
      var message, response, timeout;
      message = _arg.message, response = _arg.response, timeout = _arg.timeout;
      return this.events.serially((function(_this) {
        return function(go) {
          go(function() {
            return _this.getStore();
          });
          go(function(store) {
            return store.get(message.requestId);
          });
          return go(function(request) {
            if (request == null) {
              return null;
            }
            message = _this["package"]({
              content: response,
              to: request.from,
              requestId: message.requestId,
              timeout: timeout
            });
            return _this.events.serially(function(go) {
              go(function() {
                return _this.clearMessageTimeout(request.from, _this.name, message.requestId);
              });
              go(function() {
                return _this.getDestinationStore(request.from);
              });
              go(function(destStore) {
                return destStore.put(message.id, message);
              });
              go(function() {
                return _this.setMessageTimeout(_this.name, request.from, message.id, message.timeout);
              });
              return go(function() {
                return _this.getDestinationQueue(request.from).emit("message", message.id);
              });
            })();
          });
        };
      })(this))();
    };

    DurableChannel.prototype.close = function(message) {
      return this.events.serially((function(_this) {
        return function(go) {
          go(function() {
            return _this.getStore();
          });
          go(function(store) {
            return store["delete"](message.responseId);
          });
          return go(function() {
            return _this.clearMessageTimeout(message.to, message.from, message.responseId);
          });
        };
      })(this))();
    };

    DurableChannel.prototype.listen = function() {
      return this.events.source((function(_this) {
        return function(events) {
          return _this.queue.listen().on("success", function() {
            var messageHandler;
            messageHandler = function(messageId) {
              var store;
              store = null;
              return _this.events.serially(function(go) {
                go(function() {
                  return _this.getStore();
                });
                go(function(_store) {
                  store = _store;
                  return store.get(messageId);
                });
                go(function(message) {
                  var destStore;
                  if (message == null) {
                    return null;
                  }
                  if (message.requestId == null) {
                    return message;
                  }
                  destStore = null;
                  return _this.events.source(function(events) {
                    return _this.events.serially(function(go) {
                      go(function() {
                        return _this.getDestinationStore(message.from);
                      });
                      go(function(_destStore) {
                        destStore = _destStore;
                        return destStore.get(message.requestId);
                      });
                      return go(function(request) {
                        return _this.events.serially(function(go) {
                          go(function() {
                            if (request != null) {
                              return destStore["delete"](message.requestId);
                            } else {
                              return store["delete"](messageId);
                            }
                          });
                          return go(function() {
                            return events.emit("success", (request != null ? message : null));
                          });
                        })();
                      });
                    })();
                  });
                });
                go(function(message) {
                  var _message;
                  if (message != null) {
                    _message = {
                      content: message.content
                    };
                    _message.from = message.requestId != null ? message.to : message.from;
                    _message.to = message.requestId != null ? message.from : message.to;
                    _message.requestId = message.requestId != null ? message.requestId : message.id;
                    if (message.requestId != null) {
                      _message.responseId = message.id;
                    }
                    return _this.fire({
                      event: "message",
                      content: _message
                    });
                  }
                });
                return go(function() {
                  var _ref, _ref1;
                  if (((_ref = _this.channels["message"]) != null ? (_ref1 = _ref.handlers) != null ? _ref1.length : void 0 : void 0) > 0) {
                    return _this.queue.once("message", messageHandler);
                  }
                });
              })();
            };
            if (_this.superOn == null) {
              _this.superOn = _this.on;
            }
            _this.on = function(event, handler) {
              _this.superOn(event, handler);
              if (event === "message") {
                return _this.queue.once("message", messageHandler);
              }
            };
            return events.emit("success");
          });
        };
      })(this));
    };

    DurableChannel.prototype.end = function() {
      var key, queue, _ref, _results;
      clearTimeout(this.timeoutMonitor);
      this.adapter.close();
      this.queue.end();
      _ref = this.destinationQueues;
      _results = [];
      for (key in _ref) {
        queue = _ref[key];
        _results.push(queue.end());
      }
      return _results;
    };

    return DurableChannel;

  })(EventChannel);

  module.exports = DurableChannel;

}).call(this);
