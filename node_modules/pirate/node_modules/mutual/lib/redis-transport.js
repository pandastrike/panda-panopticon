// Generated by CoffeeScript 1.7.1
(function() {
  var EventChannel, Pool, RedisTransport, redis, toError, type, _ref,
    __slice = [].slice;

  redis = require("redis");

  Pool = require("generic-pool").Pool;

  _ref = require("fairmont"), type = _ref.type, toError = _ref.toError;

  EventChannel = require("./event-channel");

  RedisTransport = (function() {
    function RedisTransport(options) {
      var poolEvents;
      this.events = new EventChannel;
      poolEvents = this.events.source("pool");
      this.blockTimeout = options.blockTimeout;
      if (this.blockTimeout == null) {
        this.blockTimeout = 1;
      }
      this.clients = Pool({
        name: "redis-transport",
        max: 10,
        create: (function(_this) {
          return function(callback) {
            var client, host, port;
            port = options.port, host = options.host;
            client = redis.createClient(port, host, options.redis);
            client.on("error", function(error) {
              return callback(error);
            });
            return client.on("connect", function() {
              return callback(null, client);
            });
          };
        })(this),
        destroy: (function(_this) {
          return function(client) {
            return client.quit();
          };
        })(this),
        log: (function(_this) {
          return function(string, level) {
            return poolEvents.fire({
              event: level,
              content: string
            });
          };
        })(this)
      });
    }

    RedisTransport.prototype.publish = function(message) {
      return this.events.source((function(_this) {
        return function(events) {
          var channel;
          channel = message.channel;
          return _this._acquire(function(client) {
            events.once("*", function() {
              return _this.clients.destroy(client);
            });
            return client.publish(channel, JSON.stringify(message), events.callback);
          });
        };
      })(this));
    };

    RedisTransport.prototype.subscribe = function(name) {
      return this.events.source((function(_this) {
        return function(events) {
          return _this._acquire(function(client) {
            client.subscribe(name, function() {
              return events.fire({
                event: "success"
              });
            });
            client.on("message", function(channel, json) {
              return events.safely(function() {
                return events.fire({
                  event: "message",
                  content: JSON.parse(json)
                });
              });
            });
            return events.on("unsubscribe", function() {
              return client.unsubscribe(function() {
                return _this.clients.destroy(client);
              });
            });
          });
        };
      })(this));
    };

    RedisTransport.prototype.enqueue = function(message) {
      return this.events.source((function(_this) {
        return function(events) {
          var channel;
          channel = message.channel;
          return _this._acquire(function(client) {
            events.on("*", function() {
              return _this._release(client);
            });
            return client.lpush(channel, JSON.stringify(message), events.callback);
          });
        };
      })(this));
    };

    RedisTransport.prototype.dequeue = function(name) {
      return this.events.source((function(_this) {
        return function(events) {
          var _dequeue;
          return (_dequeue = function() {
            try {
              return _this._acquire(function(client) {
                return _this.events.source(function(_events) {
                  _events.on("*", function() {
                    return _this._release(client);
                  });
                  name = (type(name)) === "array" ? name : [name];
                  client.brpop.apply(client, __slice.call(name).concat([_this.blockTimeout], [_events.callback]));
                  return _events.on("success", function(results) {
                    if (results == null) {
                      return _dequeue();
                    }
                    return events.safely(function() {
                      var json, key, message;
                      key = results[0], json = results[1];
                      message = JSON.parse(json);
                      return events.emit("success", message);
                    });
                  });
                });
              });
            } catch (_error) {
              return events.emit("error");
            }
          })();
        };
      })(this));
    };

    RedisTransport.prototype._acquire = function(handler) {
      return this.events.source((function(_this) {
        return function(events) {
          _this.clients.acquire(events.callback);
          return events.on("success", function(client) {
            return handler(client);
          });
        };
      })(this));
    };

    RedisTransport.prototype._release = function(client) {
      return this.clients.release(client);
    };

    RedisTransport.prototype.end = function() {
      return this.clients.drain((function(_this) {
        return function() {
          return _this.clients.destroyAllNow();
        };
      })(this));
    };

    return RedisTransport;

  })();

  module.exports = RedisTransport;

}).call(this);
