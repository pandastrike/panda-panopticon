// Generated by CoffeeScript 1.7.1
(function() {
  var EventChannel, RemoteChannel,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventChannel = require("./event-channel");

  RemoteChannel = (function(_super) {
    __extends(RemoteChannel, _super);

    RemoteChannel.prototype.isListening = false;

    function RemoteChannel(options) {
      RemoteChannel.__super__.constructor.apply(this, arguments);
      this.name = options.name, this.transport = options.transport;
      if (this.name == null) {
        throw new Error("Remote channels cannot be anonymous");
      }
      this.events = new EventChannel;
    }

    RemoteChannel.prototype["package"] = function(message) {
      message = RemoteChannel.__super__["package"].apply(this, arguments);
      message.channel = this.name;
      return message;
    };

    RemoteChannel.prototype.send = function(message) {
      return this.events.source((function(_this) {
        return function(events) {
          var _events;
          _events = _this.transport.publish(_this["package"](message));
          return _events.forward(events);
        };
      })(this));
    };

    RemoteChannel.prototype.listen = function() {
      return this.events.source((function(_this) {
        return function(events) {
          var _events;
          if (!_this.isListening) {
            _this.isListening = true;
            _events = _this.transport.subscribe(_this.name);
            _events.on("success", function() {
              return events.fire({
                event: "success"
              });
            });
            _events.on("message", function(message) {
              return _this.fire(message);
            });
            return _this.end = function() {
              _events.fire({
                event: "unsubscribe"
              });
              return _this.transport.end();
            };
          }
        };
      })(this));
    };

    RemoteChannel.prototype.end = function() {
      return this.transport.end();
    };

    return RemoteChannel;

  })(EventChannel);

  module.exports = RemoteChannel;

}).call(this);
