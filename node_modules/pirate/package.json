{
  "name": "pirate",
  "version": "0.9.9",
  "description": "A simple storage interface with adapters for different storage systems",
  "main": "lib/index.js",
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "fairmont": "0.4.x",
    "elasticsearchclient": "0.5.x",
    "mongodb": "1.2.x",
    "mutual": "0.4.x",
    "redis": "~0.10.1",
    "typely": "0.0.0"
  },
  "devDependencies": {
    "testify": "~0.2.8",
    "sleep": "1.1.1",
    "coffee-script": "~1.6.3"
  },
  "scripts": {
    "prepublish": "coffee -o lib/ -c src/*.coffee"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/dyoder/pirate.git"
  },
  "keywords": [
    "storage",
    "interface",
    "mongo",
    "elasticsearch",
    "redis"
  ],
  "author": {
    "name": "Dan Yoder"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "readme": "# Argh! What's This?\n\nPirate provides a simple key-value storage interface with adapters for different storage systems. Pirate currently supports MongoDB, Elasticsearch, Redis and in-memory storage.\n\n## Benefits\n\nThe benefits of this approach are:\n\n* **Simplify your code.** The Pareto Principle often applies to storage systems, where you only need 20% of the features 80% of the time. Pirate optimizes that 80% while still allowing you to extend adapters to handle the other 20%, specific to your requirements.\n\n* **Eliminate the impedance mismatch between HTTP and storage.** Pirate follows a similar interface to that supported by HTTP: `get`, `put`, `patch`, and `delete`. There's no equivalent to `post` and there are a few additional  methods, but semantically, they're very close.\n\n* **Easily switch between storage implementations.** Pirate's adapters not only hide the complexity of the underlying storage implementation, they make it much easier to change it. You can prototype using an in-memory solution, then use a database and later partition your data across servers.\n\n* **Make use of powerful event-based interfaces.** Node-style callbacks provide a reasonable least-common-denominator, but for more sophisticated applications, they can be tedious. Pirate uses a library called [Mutual][0] to provide a simple event-based interface. Each method returns an `events` object to which event handlers can be attached. Events \"bubble up\" (think DOM) so that error-handling no longer needs to be done local to the call.\n\n[0]:http://github.com/dyoder/mutual\n\n## Example\n\nHere's a simple program to `put` and `get` and object from MongoDB.\n\n```coffee\n{log} = console\n{Mongo} = require \"pirate\"\n{EventChannel} = require \"mutual\"\n\n# Create the top-level events object\nevents = new EventChannel\n\n# Default error handler just logs the error\nevents.on \"error\", (error) -> log error\n\n# Create an adapter, passing in the events object\nMongo.Adapter.make\n  events: events\n  port: 27018\n  host: \"127.0.0.1\"\n  database: \"foo\"\n  options:\n    auto_reconnect: true\n\n# When the adapter is ready, we can do stuff\nevents.on \"ready\", (adapter) ->\n\n  # First, let's add a second event handler to \n  # close the connection and exit\n  events.on \"error\", ->\n    adapter.close\n    process.exit -1\n\n  # Okay, let's get the collection we're going to use\n  (adapter.collection \"bar\")\n\n  # Once we have the collection, let's put something\n  .on \"success\", (collection) ->\n    (collection.put \"baz\", baz: \"hello\")\n\n    # If the put works, try getting the same thing back out\n    .on \"success\", (object) ->\n      (collection.get \"baz\")\n\n      # If the get works, show the result and close the \n      # adapter because we're done!\n      .on \"success\", (object) ->\n        log object\n        adapter.close()\n```\n\n# Adapter API\n\nThe elements of the interface are:\n\n* `get key` Returns the object associated with the key or null.\n\n* `put key, object` Overwrites the object associated with `key` with `object`. Returns the updated object.\n\n* `delete key` Deletes the object associated with `key`. Returns nothing.\n\n* `patch key, patch` Updates the object associated with `key` by overlaying `patch`. Returns the updated object.\n\n* `all` Returns all the objects in the collection.\n\n* `count` Returns a count of all the objects in the collection.\n\nAll API methods actually return an `EventChannel` object. The `success` event is how a value is ultimately returned, if necessary.\n\n\n\n          \n\n",
  "bugs": {
    "url": "https://github.com/dyoder/pirate/issues"
  },
  "homepage": "https://github.com/dyoder/pirate",
  "_id": "pirate@0.9.9",
  "_shasum": "6384f76fc64e0defc217281c39567b4f340a8656",
  "_from": "pirate@",
  "_resolved": "https://registry.npmjs.org/pirate/-/pirate-0.9.9.tgz"
}
