// Generated by CoffeeScript 1.6.3
module.exports = {
  dependencies: function(definition, context) {
    var dependency, fn, property, tests,
      _this = this;
    if (!this.test_type("object", definition)) {
      throw new Error("Value of 'dependencies' must be an object");
    } else {
      tests = [];
      for (property in definition) {
        dependency = definition[property];
        if (this.test_type("string", dependency)) {
          tests.push(function(data, runtime) {
            if ((data[property] != null) && (data[dependency] == null)) {
              return runtime.child(property).error(context);
            }
          });
        } else if (this.test_type("array", dependency)) {
          tests.push(function(data, runtime) {
            var item, _i, _len, _results;
            if (data[property] != null) {
              _results = [];
              for (_i = 0, _len = dependency.length; _i < _len; _i++) {
                item = dependency[_i];
                if (data[item] == null) {
                  _results.push(runtime.child(property).error(context));
                } else {
                  _results.push(void 0);
                }
              }
              return _results;
            }
          });
        } else if (this.test_type("object", dependency)) {
          fn = this.compile(dependency, context);
          tests.push(function(data, runtime) {
            if (data[property]) {
              return fn(data, runtime);
            } else {
              return true;
            }
          });
        } else {
          throw new Error("Invalid dependency");
        }
      }
    }
    return function(data, runtime) {
      var test, _i, _len, _results;
      if (_this.test_type("object", data)) {
        _results = [];
        for (_i = 0, _len = tests.length; _i < _len; _i++) {
          test = tests[_i];
          _results.push(test(data, runtime));
        }
        return _results;
      }
    };
  },
  properties: function(definition, context) {
    var new_context, property, required, schema, test, tests,
      _this = this;
    if (!this.test_type("object", definition)) {
      throw new Error("The 'properties' attribute must be an object");
    }
    tests = {};
    required = [];
    for (property in definition) {
      schema = definition[property];
      new_context = context.child(property);
      test = this.compile(schema, new_context);
      tests[property] = test;
      if (schema.required === true) {
        required.push(property);
      }
    }
    return function(data, runtime) {
      var key, value, _i, _len;
      if (_this.test_type("object", data)) {
        for (property in data) {
          value = data[property];
          if (test = tests[property]) {
            test(value, runtime.child(property));
          }
        }
        for (_i = 0, _len = required.length; _i < _len; _i++) {
          key = required[_i];
          if (data[key] === void 0) {
            runtime.error(context.child(key).child("required"));
          }
        }
        return true;
      }
    };
  },
  patternProperties: function(definition, context) {
    var additionalProperties, pattern, schema, tests,
      _this = this;
    additionalProperties = context.modifiers.additionalProperties;
    if (additionalProperties) {
      return null;
    }
    if (!this.test_type("object", definition)) {
      throw new Error("The 'patternProperties' attribute must be an object");
    }
    tests = {};
    for (pattern in definition) {
      schema = definition[pattern];
      tests[pattern] = {
        regex: new RegExp(pattern),
        test: this.compile(schema, context.child(pattern))
      };
    }
    return function(data, runtime) {
      var object, property, value, _results;
      _results = [];
      for (property in data) {
        value = data[property];
        _results.push((function() {
          var _results1;
          _results1 = [];
          for (pattern in tests) {
            object = tests[pattern];
            if (object.regex.test(property)) {
              _results1.push(object.test(value, runtime.child(property)));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        })());
      }
      return _results;
    };
  },
  additionalProperties: function(definition, context) {
    var add_prop_test, pattern, patternProperties, patterns, properties, schema, _ref,
      _this = this;
    _ref = context.modifiers, properties = _ref.properties, patternProperties = _ref.patternProperties;
    if (this.test_type("object", definition)) {
      add_prop_test = this.compile(definition, context);
    } else if (definition === false) {
      add_prop_test = function(data, runtime) {
        return runtime.error(context);
      };
    } else if (definition === void 0) {
      add_prop_test = null;
    } else {
      throw new Error("The 'additionalProperties' attribute must be an object or false");
    }
    patterns = {};
    for (pattern in patternProperties) {
      schema = patternProperties[pattern];
      patterns[pattern] = {
        regex: new RegExp(pattern),
        test: this.compile(schema, context.sibling("patternProperties").child(pattern))
      };
    }
    return function(data, runtime) {
      var explicit, object, patterned, property, value, _results;
      if (_this.test_type("object", data)) {
        _results = [];
        for (property in data) {
          value = data[property];
          explicit = false;
          patterned = false;
          if (properties != null ? properties[property] : void 0) {
            explicit = true;
          }
          if (patterns) {
            for (pattern in patterns) {
              object = patterns[pattern];
              if (object.regex.test(property)) {
                patterned = true;
                object.test(value, runtime.child(property));
              }
            }
          }
          if (!explicit && !patterned && add_prop_test) {
            _results.push(add_prop_test(value, runtime.child(property)));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };
  }
};
