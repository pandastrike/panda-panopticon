// Generated by CoffeeScript 1.6.3
module.exports = {
  maxItems: function(value, context) {
    var _this = this;
    return function(data, runtime) {
      if (_this.test_type("array", data)) {
        if (data.length > value) {
          return runtime.error(context);
        }
      }
    };
  },
  minItems: function(value, context) {
    var _this = this;
    return function(data, runtime) {
      if (_this.test_type("array", data)) {
        if (data.length < value) {
          return runtime.error(context);
        }
      }
    };
  },
  items: function(definition, context) {
    var test,
      _this = this;
    if (this.test_type("array", definition)) {
      return test = this._tuple_items(definition, context);
    } else {
      test = this.compile(definition, context);
      return function(data, runtime) {
        var i, item, _i, _len, _results;
        _results = [];
        for (i = _i = 0, _len = data.length; _i < _len; i = ++_i) {
          item = data[i];
          _results.push(test(item, runtime.child(i)));
        }
        return _results;
      };
    }
  },
  _additionalItems: function(definition, context) {
    var test,
      _this = this;
    if (this.test_type("object", definition)) {
      test = this.compile(definition, context);
    } else if (definition === false) {
      test = function(data, runtime) {
        return runtime.error(context);
      };
    } else {
      throw new Error("The 'additionalItems' attribute must be an object or false");
    }
    return function(data, runtime) {
      var i, item, _i, _len, _results;
      _results = [];
      for (i = _i = 0, _len = data.length; _i < _len; i = ++_i) {
        item = data[i];
        _results.push(test(item, runtime.child(i)));
      }
      return _results;
    };
  },
  _tuple_items: function(definition, context) {
    var add_item_test, additionalItems, i, schema, tests, _i, _len,
      _this = this;
    additionalItems = context.modifiers.additionalItems;
    if (additionalItems != null) {
      add_item_test = this._additionalItems(additionalItems, context.sibling("additionalItems"));
    } else {
      add_item_test = null;
    }
    tests = [];
    for (i = _i = 0, _len = definition.length; _i < _len; i = ++_i) {
      schema = definition[i];
      tests.push(this.compile(schema, context.child(i.toString())));
    }
    return function(data, runtime) {
      var test, _j, _len1;
      if (_this.test_type("array", data)) {
        for (i = _j = 0, _len1 = tests.length; _j < _len1; i = ++_j) {
          test = tests[i];
          test(data[i], runtime.child(i));
        }
        if ((data.length > tests.length) && add_item_test) {
          return add_item_test(data.slice(tests.length), runtime);
        }
      }
    };
  },
  uniqueItems: function(definition, context) {
    console.error("uniqueItems is a no-op");
    return null;
  }
};
