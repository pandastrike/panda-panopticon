// Generated by CoffeeScript 1.6.3
module.exports = {
  type: function(definition, context) {
    var tests, type, _fn, _i, _len,
      _this = this;
    if (this.test_type("array", definition)) {
      tests = [];
      _fn = function(type) {
        var test;
        if (_this.test_type("object", type)) {
          test = _this.compile(type, context);
          return tests.push(function(data, runtime) {
            var temp;
            temp = new runtime.constructor({
              pointer: "",
              errors: []
            });
            test(data, temp);
            return temp.errors.length === 0;
          });
        } else {
          return tests.push(function(data, runtime) {
            return _this.test_type(type, data);
          });
        }
      };
      for (_i = 0, _len = definition.length; _i < _len; _i++) {
        type = definition[_i];
        _fn(type);
      }
      return function(data, runtime) {
        var test, valid, _j, _len1;
        valid = false;
        for (_j = 0, _len1 = tests.length; _j < _len1; _j++) {
          test = tests[_j];
          if (test(data, runtime)) {
            valid = true;
          }
        }
        if (valid === false) {
          return runtime.error(context);
        }
      };
    } else if (this.test_type("object", definition)) {
      return this.compile(definition, context);
    } else {
      return function(data, runtime) {
        if (!_this.test_type(definition, data)) {
          return runtime.error(context);
        }
      };
    }
  },
  disallow: function(definition, context) {
    var i, tests, type, _fn, _i, _len,
      _this = this;
    if (this.test_type("array", definition)) {
      tests = [];
      _fn = function(i) {
        var inverse;
        if (_this.test_type("object", type)) {
          inverse = _this.compile(type, context);
          return tests.push(function(data, runtime) {
            var temp;
            temp = new runtime.constructor({
              pointer: "",
              errors: []
            });
            inverse(data, temp);
            if (temp.errors.length === 0) {
              return runtime.error(context);
            }
          });
        } else {
          return tests.push(_this.disallow(type, context));
        }
      };
      for (i = _i = 0, _len = definition.length; _i < _len; i = ++_i) {
        type = definition[i];
        _fn(i);
      }
      return function(data, runtime) {
        var test, _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = tests.length; _j < _len1; _j++) {
          test = tests[_j];
          _results.push(test(data, runtime));
        }
        return _results;
      };
    } else {
      return function(data, runtime) {
        if (_this.test_type(definition, data)) {
          return runtime.error(context);
        }
      };
    }
  },
  is_object: function(data) {
    return (data != null) && (typeof data) === "object" && !(data instanceof Array) && !(data instanceof Date);
  },
  test_type: function(type_name, data) {
    switch (type_name) {
      case "integer":
        return typeof data === "number" && data % 1 === 0;
      case "number":
        return typeof data === "number";
      case "string":
        return typeof data === "string";
      case "object":
        return this.is_object(data);
      case "array":
        return data instanceof Array;
      case "boolean":
        return typeof data === "boolean";
      case "null":
        return data === null;
      case "any":
        return true;
      default:
        throw new Error("Bad type: '" + type_name + "'");
    }
  }
};
