{
  "name": "fairmont",
  "version": "0.7.4",
  "description": "A collection of useful functions and utilities.",
  "files": [
    "index.coffee",
    "src/",
    "README.md"
  ],
  "main": "index.coffee",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/dyoder/fairmont.git"
  },
  "keywords": [
    "coffee",
    "coffeescript",
    "utility"
  ],
  "author": {
    "name": "Dan Yoder"
  },
  "license": "BSD",
  "devDependencies": {
    "testify": "~0.2.4"
  },
  "readme": "# Fairmont\n\nA collection of useful CoffeeScript/JavaScript functions.\n\n## General Purpose Functions\n\n**w** Split a string on whitespace. Useful for concisely creating arrays of strings.\n\n    console.log word for word in w \"foo bar baz\"\n    \n**type** Get the type of a value. Possible values are: `number`, `string`, '`boolean`, `data`, `regexp`, `function`, `array`, `object`, `null`, `undefined`. Adapted from [The CoffeeScript Cookbook][0] and based on Douglas Crockford's [remedial JavaScript blog post][1].\n\n[0]:http://coffeescriptcookbook.com/chapters/classes_and_objects/type-function\n[1]:http://javascript.crockford.com/remedial.html\n\n    foo() if type( foo ) == \"function\"\n\n**timer** Set a timer. Takes an interval in microseconds and an action. Returns a function to cancel the timer. Basically, a more convenient way to call `setTimeout` and `clearTimeout`.\n\n    cancel = timer 1000, -> console.log \"Done\"\n    cancel()\n    \n## Array Functions\n\n**remove** Destructively remove an element from an array. Returns the element removed.\n\n    a = w \"foo bar baz\"\n    remove( a, \"bar\" )\n\n**uniq** Takes an array and returns a new array with all duplicate values from the original array removed. Also takes an optional hash function that defaults to calling `toString` on the elements. \n\n    uniq [1,2,3,1,2,3,4,5,6,3,6,2,4]\n    # returns [1,2,3,4,5,6]\n\n**shuffle** Takes an array and returns a new array with all values shuffled randomly.\n\n    shuffle [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n    # for e.g.: returns [\"b\", \"c\", \"d\", \"e\", \"f\", \"a\"]\n\n## File System Functions\n\nAll file-system functions are based on Node's `fs` API. This is not `require`d unless the function is actually invoked.\n\n**exists** Check to see if a file exists.\n\n    source = read( sourcePath ) if exists( sourcePath )\n\n**read** Read a file synchronously and return a UTF-8 string of the contents.\n\n    source = read( sourcePath ) if exists( sourcePath )\n\n**write** Synchronously write a UTF-8 string to a file.\n\n    write( file.replace( /foo/g, 'bar' ) )\n\n**readdir** Synchronously get the contents of a directory as an array.\n\n    for file in readdir(\"documents\")\n      console.log read( file ) if stat( file ).isFile()\n\n**stat** Synchronously get the stat object for a file.\n\n    for file in readdir(\"documents\")\n      console.log read( file ) if stat( file ).isFile()\n\n**chdir** Change directories, execute a function, and then restore the original working directory.\n\n    chdir \"documents\", ->\n      console.log read( \"README\" )\n      \n**rm** Removes a file.\n\n    rm \"documents/reamde.txt\"\n\n**rmdir** Removes a directory.\n\n    rmdir \"documents\"\n\n## Hashing/Encoding Functions\n\n**md5** Return the MD5 hash of a string.\n\n    nutshell = md5( myLifeStory )\n\n**base64** Base64 encode a string. (Not URL safe.)\n\n    image = data: base64( imageData )\n\n## Object Functions\n\n**include** Adds the properties of one or more objects to another.\n\n    include( @, ScrollbarMixin, SidebarMixin )\n\n**merge** Creates new object by progressively adding the properties of each given object.\n\n    options = merge( defaults, globalOptions, localOptions )\n\n**delegate** Delegates from one object to another by creating functions in the first object that call the second.\n\n    delegate( aProxy, aServer )\n\n## Object Mixins\n\nMixins are objects that you can `include` into another, typically adding features to an object in the process.\n\n**Property** Add a `property` method to a class, making it easier to define getters and setters on its prototype.\n\n    class Foo\n      include @, Property\n      property \"foo\", get: -> @_foo, set: (v) -> @_foo = v\n\nProperties defined using `property` are enumerable.\n\n## Function Functions\n\n**memoize** A very simple way to cache results of functions that take a single argument. Also takes an optional hash function that defaults to calling `toString` on the function's argument.\n\n    nickname = (email) ->\n      expensiveLookupToGetNickname( email )\n      \n    memoize( nickname )",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/dyoder/fairmont/issues"
  },
  "homepage": "https://github.com/dyoder/fairmont",
  "_id": "fairmont@0.7.4",
  "_shasum": "fda7f5c7a796dc856d5af98a44338e21c2d3d0f4",
  "_from": "fairmont@~0.7.0",
  "_resolved": "https://registry.npmjs.org/fairmont/-/fairmont-0.7.4.tgz"
}
