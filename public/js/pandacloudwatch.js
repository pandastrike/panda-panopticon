// Generated by CoffeeScript 1.7.1
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.PCW = {};

  window.Dashboard = {};

  PCW.instance_list = [];

  PCW.tag_list = [];

  PCW.match_list = [];

  Dashboard.InitializeEvents = function() {
    var filter_type_radio, option_tabs;
    option_tabs = document.getElementById("optionTabs");
    option_tabs.addEventListener("core-select", function() {
      var name;
      document.getElementById('option_0').style.display = "none";
      document.getElementById('option_1').style.display = "none";
      document.getElementById('option_2').style.display = "none";
      name = "option_" + option_tabs.selected;
      return document.getElementById(name).style.display = "block";
    });
    filter_type_radio = document.getElementById("filter_type");
    return filter_type_radio.addEventListener("core-select", function() {
      if (filter_type_radio.selected === "filter_instance") {
        return Dashboard.PopulateInstanceSelector();
      } else {
        return Dashboard.PopulateTagSelector();
      }
    });
  };

  Dashboard.ToggleDialog = function(name) {
    return document.getElementById(name).toggle();
  };

  Dashboard.DeleteDuplicateTags = function() {
    var hold, i, temp_list, _i, _ref;
    if (PCW.tag_list.length > 1) {
      temp_list = [];
      hold = PCW.tag_list[0];
      for (i = _i = 1, _ref = PCW.tag_list.length - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        if (PCW.tag_list[i] === hold) {

        } else {
          temp_list.push(hold);
          hold = PCW.tag_list[i];
        }
        if (i === PCW.tag_list.length - 1 && hold !== temp_list[temp_list.length - 1]) {
          temp_list.push(hold);
        }
      }
      return PCW.tag_list = temp_list;
    }
  };

  Dashboard.PopulateInstanceSelector = function() {
    var i, name, selector, _i, _ref;
    selector = document.getElementById("filterSelector");
    selector.innerHTML = '';
    for (i = _i = 0, _ref = PCW.instance_list.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      name = document.createElement("div");
      name.innerHTML = PCW.instance_list[i];
      name.id = PCW.instance_list[i];
      name.className = "filter";
      selector.appendChild(name);
    }
    return Dashboard.SelectAll("filterSelector");
  };

  Dashboard.PopulateTagSelector = function() {
    var i, name, selector, _i, _ref;
    selector = document.getElementById("filterSelector");
    selector.innerHTML = '';
    for (i = _i = 0, _ref = PCW.tag_list.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      name = document.createElement("div");
      name.innerHTML = PCW.tag_list[i];
      name.className = "filter";
      selector.appendChild(name);
    }
    return Dashboard.SelectAll("filterSelector");
  };

  Dashboard.SelectAll = function(name) {
    var i, select_array, selector, _i, _ref;
    selector = document.getElementById(name);
    select_array = [];
    for (i = _i = 0, _ref = selector.childNodes.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      select_array.push(i);
    }
    return selector.selected = select_array;
  };

  Dashboard.SelectNone = function(name) {
    var selector;
    selector = document.getElementById(name);
    return selector.selected = null;
  };

  PCW.AWSLogin = function() {
    var foo_1, foo_2, foo_3, message, request;
    foo_1 = document.getElementById('login1').invalid;
    foo_2 = window.document.getElementById('login2').invalid;
    foo_3 = window.document.getElementById('login3').invalid;
    if (foo_1 === false && foo_2 === false && foo_3 === false) {
      request = new XMLHttpRequest();
      request.open("POST", "/login", true);
      message = "";
      message += document.getElementById('login1').inputValue + ",";
      message += document.getElementById('login2').inputValue + ",";
      message += document.getElementById('login3').inputValue;
      request.onreadystatechange = function() {
        var i, temp, _i, _ref;
        if (request.readyState === 4) {
          if (request.status !== 200) {
            document.getElementById('loginDialog').toggle();
            document.getElementById('toastMessage').text = "Apologies. Amazon has declined this login.   Reason: " + request.responseText;
            return document.getElementById('toastMessage').show();
          } else {
            temp = request.responseText.split(";");
            PCW.user_token = temp[0];
            PCW.instance_list = temp[1].split(",");
            PCW.tag_list = temp[2].split(",");
            for (i = _i = 3, _ref = temp.length - 1; 3 <= _ref ? _i <= _ref : _i >= _ref; i = 3 <= _ref ? ++_i : --_i) {
              PCW.match_list.push(PCW.instance_list[i] + "," + temp[i]);
            }
            PCW.instance_list.sort();
            PCW.tag_list.sort();
            Dashboard.DeleteDuplicateTags();
            PCW.LinkTagsToInstances();
            Dashboard.PopulateInstanceSelector();
            Dashboard.SelectAll("metricSelector");
            message = "";
            document.getElementById('login1').value = "";
            document.getElementById('login2').value = "";
            document.getElementById('login3').value = "";
            document.getElementById('toastMessage').text = "Success!  Connection established.";
            document.getElementById('toastMessage').show();
            document.getElementById('loginButton').style.display = "none";
            document.getElementById('optionButton').style.display = "block";
            return document.getElementById('plotButton').style.display = "block";
          }
        }
      };
      return request.send(message);
    } else {
      document.getElementById('loginDialog').toggle();
      document.getElementById('toastMessage').text = "Apologies. AWS Login cannot occur without full credentials.";
      return document.getElementById('toastMessage').show();
    }
  };

  PCW.LinkTagsToInstances = function() {
    var bar, foo, instance_id, obj, temp, x, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
    PCW.instance_with_tags = [];
    PCW.tag_with_instances = [];
    _ref = PCW.match_list;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      x = _ref[_i];
      foo = x.split(",");
      instance_id = foo[0];
      foo.splice(0, 1);
      bar = {
        instance: instance_id,
        tags: foo
      };
      PCW.instance_with_tags.push(bar);
    }
    _ref1 = PCW.tag_list;
    _results = [];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      foo = _ref1[_j];
      temp = [];
      _ref2 = PCW.instance_with_tags;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        bar = _ref2[_k];
        if (__indexOf.call(bar.tags, foo) >= 0) {
          temp.push(bar.instance);
        }
      }
      obj = {
        tag: foo,
        instances: temp
      };
      _results.push(PCW.tag_with_instances.push(obj));
    }
    return _results;
  };

  PCW.PullMetrics = function() {
    var bar, i, message, request, target, temp, _i, _j, _ref, _ref1;
    message = PCW.PrepOptionString();
    if (message === "Total Filter Deselection") {
      document.getElementById('toastMessage').text = "Apologies. You must select at least one instance or tag to pull metrics.";
      document.getElementById('toastMessage').show();
      return;
    } else if (message === "Total Metric Deselection") {
      document.getElementById('toastMessage').text = "Apologies. You must select at least one metric to display data.";
      document.getElementById('toastMessage').show();
      return;
    }
    document.getElementById('plot_area').innerHTML = '';
    for (i = _i = 0, _ref = PCW.metric_pull_list.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      temp = document.createElement("div");
      temp.id = "plot_" + i;
      temp.className = "plot";
      document.getElementById('plot_area').appendChild(temp);
    }
    for (i = _j = 0, _ref1 = PCW.metric_pull_list.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
      bar = document.createElement('paper-progress');
      bar.id = "download_bar_" + i;
      bar.min = 0;
      bar.max = PCW.target_pull_list.length - 1;
      bar.value = 0;
      target = document.getElementById('plot_' + i);
      target.appendChild(bar);
    }
    PCW.final_series = [];
    request = new XMLHttpRequest();
    request.open("POST", "/pull_metrics", true);
    message = PCW.user_token + ";" + PCW.time_parameters + ";" + PCW.target_pull_list[0] + ";" + PCW.metric_pull_list[0];
    PCW.target_index = 0;
    PCW.metric_index = 0;
    return PCW.CallAmazon(request, message);
  };

  PCW.CallAmazon = function(request, message) {
    request.onreadystatechange = function() {
      var bar_id;
      if (request.readyState === 4) {
        if (request.status !== 200) {
          document.getElementById('toastMessage').text = "Apologies. Something went wrong...   Reason: " + request.responseText;
          return document.getElementById('toastMessage').show();
        } else {
          PCW.ParseResponse(request.responseText);
          bar_id = 'download_bar_' + PCW.metric_index;
          document.getElementById(bar_id).value = String(PCW.target_index);
          if (PCW.target_index < PCW.target_pull_list.length - 1) {
            PCW.target_index++;
            request = new XMLHttpRequest();
            request.open("POST", "/pull_metrics", true);
            message = PCW.user_token + ";" + PCW.time_parameters + ";" + PCW.target_pull_list[PCW.target_index] + ";" + PCW.metric_pull_list[PCW.metric_index];
            return PCW.CallAmazon(request, message);
          } else {
            PCW.DrawPlot();
            PCW.final_series = [];
            if (PCW.metric_index < PCW.metric_pull_list.length - 1) {
              PCW.target_index = 0;
              PCW.metric_index++;
              request = new XMLHttpRequest();
              request.open("POST", "/pull_metrics", true);
              message = PCW.user_token + ";" + PCW.time_parameters + ";" + PCW.target_pull_list[PCW.target_index] + ";" + PCW.metric_pull_list[PCW.metric_index];
              return PCW.CallAmazon(request, message);
            }
          }
        }
      }
    };
    return request.send(message);
  };

  PCW.PrepOptionString = function() {
    var d, end, i, instance, item, message, selector, start, tag, temp, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1;
    message = "";
    if (document.getElementById("timespan_radio").selected === "timespan_minutes") {
      temp = document.getElementById("timespan").inputValue * 60 * 1000;
    } else if (document.getElementById("timespan_radio").selected === "timespan_hours") {
      temp = document.getElementById("timespan").inputValue * 60 * 60 * 1000;
    } else {
      temp = document.getElementById("timespan").inputValue * 24 * 60 * 60 * 1000;
    }
    if (temp < 300000) {
      temp = 300000;
    }
    if (temp > 1209600000) {
      temp = 1209600000;
    }
    d = new Date();
    start = new Date(d.getTime() - temp).toISOString();
    end = new Date(d.getTime()).toISOString();
    message += start + "," + end + ",";
    if (document.getElementById("resolution_radio").selected === "resolution_minutes") {
      temp = document.getElementById("resolution").inputValue * 60;
    } else if (document.getElementById("resolution_radio").selected === "resolution_hours") {
      temp = document.getElementById("resolution").inputValue * 60 * 60;
    } else {
      temp = document.getElementById("resolution").inputValue * 24 * 60 * 60;
    }
    if (temp < 60) {
      temp = 60;
    }
    if (temp > 604800) {
      temp = 604800;
    }
    message += temp;
    PCW.time_parameters = message;
    message = "";
    selector = document.getElementById('filterSelector');
    PCW.target_pull_list = [];
    if (document.getElementById('filter_type').selected === "filter_instance") {
      temp = selector.selectedItem;
      for (_i = 0, _len = temp.length; _i < _len; _i++) {
        i = temp[_i];
        PCW.target_pull_list.push(i.innerHTML);
      }
      if (PCW.target_pull_list === null) {
        return "Total Filter Deselection";
      }
    } else {
      temp = selector.selectedItem;
      if (temp === null) {
        return "Total Filter Deselection";
      }
      for (_j = 0, _len1 = temp.length; _j < _len1; _j++) {
        item = temp[_j];
        _ref = PCW.tag_with_instances;
        for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
          tag = _ref[_k];
          if (item.innerHTML === tag.tag) {
            _ref1 = tag.instances;
            for (_l = 0, _len3 = _ref1.length; _l < _len3; _l++) {
              instance = _ref1[_l];
              if (__indexOf.call(PCW.target_pull_list, instance) < 0) {
                PCW.target_pull_list.push(instance);
              }
            }
          }
        }
      }
    }
    selector = document.getElementById('metricSelector');
    PCW.metric_pull_list = [];
    temp = selector.selectedItem;
    for (_m = 0, _len4 = temp.length; _m < _len4; _m++) {
      i = temp[_m];
      PCW.metric_pull_list.push(i.id);
    }
    if (PCW.metric_pull_list === null) {
      return "Total Metric Deselection";
    }
    return message;
  };

  PCW.ParseResponse = function(response_string) {
    var bar, d, data, datum, foo, i, instance, label, offset, series, tag, temp, _i, _j, _k, _l, _len, _len1, _m, _n, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
    series = response_string.split(";");
    data = [];
    if (series.length !== 1) {
      for (i = _i = 0, _ref = series.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        datum = series[i].split(",");
        temp = {
          Timestamp: datum[0],
          Value: datum[1]
        };
        data.push(temp);
      }
      for (i = _j = 0, _ref1 = data.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        d = new Date(data[i].Timestamp);
        data[i].Timestamp = d.getTime();
      }
      data.sort(function(a, b) {
        if (a.Timestamp > b.Timestamp) {
          return 1;
        } else if (a.Timestamp < b.Timestamp) {
          return -1;
        } else {
          return 0;
        }
      });
      d = new Date();
      offset = d.getTimezoneOffset() * 60000;
      for (i = _k = 0, _ref2 = data.length - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
        data[i].Timestamp -= offset;
      }
      temp = [];
      for (i = _l = 0, _ref3 = data.length - 1; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; i = 0 <= _ref3 ? ++_l : --_l) {
        foo = [];
        foo.push(Number(data[i].Timestamp));
        foo.push(Number(data[i].Value));
        temp.push(foo);
      }
      label = '<b>Instance ID: </b>' + PCW.target_pull_list[PCW.target_index] + '<br>' + '<b>Tags: </b> ';
      _ref4 = PCW.instance_with_tags;
      for (_m = 0, _len = _ref4.length; _m < _len; _m++) {
        instance = _ref4[_m];
        if (instance.instance === PCW.target_pull_list[PCW.target_index]) {
          _ref5 = instance.tags;
          for (_n = 0, _len1 = _ref5.length; _n < _len1; _n++) {
            tag = _ref5[_n];
            label += tag + '<br>';
          }
        }
      }
      bar = {
        name: String(label),
        data: temp
      };
      return PCW.final_series.push(bar);
    }
  };

  PCW.DrawPlot = function() {
    var d, e, name, params, temp, time_range, ylabel;
    temp = PCW.time_parameters.split(",");
    time_range = temp[0];
    d = new Date(time_range);
    e = new Date();
    time_range = e.getTime() - d.getTime();
    if (PCW.metric_pull_list[PCW.metric_index] === "CPUUtilization") {
      ylabel = "Percentage";
    } else if (PCW.metric_pull_list[PCW.metric_index] === "DiskReadOps" || PCW.metric_pull_list[PCW.metric_index] === "DiskWriteOps") {
      ylabel = "Count";
    } else {
      ylabel = "Bytes";
    }
    params = {
      title: {
        text: String(PCW.metric_pull_list[PCW.metric_index]),
        x: -20
      },
      tooltip: {
        headerFormat: '<span style="font-size: 12px"><b>Value: </b> {point.y} <br> <b>Time: </b> {point.key}</span><br>',
        pointFormat: '{series.name}'
      },
      xAxis: {
        type: 'datetime',
        minRange: time_range
      },
      yAxis: {
        title: {
          text: ylabel
        },
        plotLines: [
          {
            value: 0,
            width: 1,
            color: '#808080'
          }
        ],
        floor: 0
      },
      legend: {
        enabled: false
      },
      series: PCW.final_series
    };
    name = "#plot_" + PCW.metric_index;
    return $(function() {
      return $(name).highcharts(params);
    });
  };

}).call(this);
